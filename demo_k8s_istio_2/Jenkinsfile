appName = "demo-2-app"

pipeline {
	agent {
		label 'maven'
	}

	stages {
		stage('Build App') {
			steps {
				git branch: 'master', url: 'https://github.com/footfix73/k8s_istio.git'
				
				script {
					def pom = readMavenPom file: 'pom.xml'
					version = pom.version
				}
				sh "mvn -f demo_k8s_istio_2/pom.xml clean install -DskipTests=true"
            }
		}
		
		stage('Test'){
			steps{
				echo "Test Stage"
				//sh "${mvnCmd} test -Dspring.profiles.active=test"
				//step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
            }
		}
		
		stage('Code Analysis'){
			steps{
				script{
					echo "Code Analysis"
					//sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000  -DskipTests=true"
				}
            }
        }
		
		stage('Create Image Builder'){
			when {
				expression {
					openshift.withCluster() {
						openshift.withProject("vicentegarcia-dev") {
							return !openshift.selector("bc", "demo-2-app").exists();
						}
					}
				}
            }
            steps {
				script {
					echo "Create Image Builder"
					openshift.withCluster() {
						openshift.withProject("vicentegarcia-dev") {
							openshift.newBuild("--name=demo-2-app", "--docker-image=registry.redhat.io/jboss-eap-7/eap74-openjdk11-openshift-rhel8", "--binary") 
						}
					}
				}
            }
		}
		
		stage('Build Image') {
			steps {
				sh "rm -rf ocp && mkdir -p ocp/deployments"
				sh "pwd && ls -la demo_k8s_istio_2/target "
				sh "cp demo_k8s_istio_2/target/k8sistio-*.jar ocp/deployments"

				script {
					echo "Build Image"
					openshift.withCluster() {
						openshift.withProject("vicentegarcia-dev") {
							openshift.selector("bc", "demo-2-app").startBuild("--from-dir=./ocp","--follow", "--wait=true")
						}
					}
				}
            }
          }
		
		stage('Deploy DEV') {
			steps {
				script {
					echo "Deploy DEV"
					openshift.withCluster() {
						openshift.withProject("vicentegarcia-dev") {
							def deployment = openshift.selector("dc", "demo-2-app") 
    
              				if(!deployment.exists()){ 
                				openshift.newApp('demo-2-app', "--as-deployment-config").narrow('svc').expose() 
              				} 
    
              				timeout(5) { 
                				openshift.selector("dc", "demo-2-app").related('pods').untilEach(1) { 
                  					return (it.object().status.phase == "Running") 
                				} 
              				}
						}
					}
				}
			}
		}
		
		
	}
}